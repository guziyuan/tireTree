建树
const int N = 1000050;
int trie[N][26];
int cnt[N];
int id;

void insert(string s)
{
	int p = 0;
	for (int i = 0; i < s.size(); i++)
	{
		int x = s[i] - 'a';
		if (trie[p][x] == 0) trie[p][x] = ++id;
		p = trie[p][x];
	}
	cnt[p]++;
}

int  find(string s)
{
	int p = 0;
	for (int i = 0; i < s.size(); i++)
	{
		int x = s[i] - 'a';
		if (trie[p][x] == 0)return 0;
		p = trie[p][x];
	}
	return cnt[p];
}
字典树节点的添加与删除
//字典树(前缀树)的实现(添加、删除、查找、查找前缀)
public class DicTree{
	public  TrieNode root; //定义根节点
 
	//字典树构造函数初始化
	public DicTree()
	{
		root=new TrieNode();
	}
	//字典树节点的定义
	 class TrieNode{
 
		public int path;
		public int end;
		public TrieNode[]map;
         //构造函数实现初始化
		public TrieNode()
		{
			 path=0;
			 end=0;
			 map=new TrieNode[26];
		}
 
	}
 
	//(1)添加
	public  void insert(String word)
	{
       if(word==null)
       {
       	 return;
       }
       //字符串转数组
       char[]chs=word.toCharArray();
       TrieNode node=root;
       int index=0;
       for(int i=0;i<chs.length;i++)
       {
       	   index=chs[i]-'a';
       	   if(node.map[index]==null)
       	   {
       	   	  node.map[index]=new TrieNode();
       	   }
       	   node=node.map[index];
       	   node.path++;
       }
       node.end++;
	}
   
    //(2)删除
    public  void delete(String word)
    {  
    	//字典树中是否含有word单词
       if(search(word))
       {
       	 //字符串转数组
       char[]chs=word.toCharArray();
       TrieNode node=root;
       int index=0;
       for(int i=0;i<chs.length;i++)
       {
       	   index=chs[i]-'a';
       	   if(node.map[index].path--==1)
       	   {
       	   	  node.map[index]=null;
       	   	  return ;
       	   }
       	   node=node.map[index];
       	   
       }
       node.end--;
       } 
    }